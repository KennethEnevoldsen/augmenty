[build-system]
requires = ["setuptools>=61.0.0", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "augmenty"
version = "1.4.3"
description = "An augmentation library based on SpaCy for joint augmentation of text and labels."
authors = [
    { name = "Kenneth Enevoldsen", email = "kennethcenevoldsen@gmail.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
keywords = [
    "nlp",
    "NLP",
    "spaCy",
    "text analysis",
    "natural language processing",
    "text mining",
    "augmentation",
    "data augmentation",
    "data science",
    "machine learning",
    "deep learning",
]
requires-python = ">=3.8"
dependencies = [
    "spacy>=3.2.0",
    "catalogue>=2.0.4",
    "thinc>=8.0.8",
    "pydantic>=1.8.2",
    "numpy>=1.15.0",
]
[project.readme]
file = "readme.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/KennethEnevoldsen/augmenty"
Documentation = "https://kennethenevoldsen.github.io/augmenty/"
Repository = "https://github.com/KennethEnevoldsen/augmenty"

[project.license]
file = "LICENSE"
name = "MIT"
[project.optional-dependencies]
da = ["dacy>=2.3.1"]
all = ["nltk>=3.6.7"]
dev = [
    "cruft>=2.0.0",
    "pyright>=1.1.343",
    "ruff>=0.0.254",
    "pyproject-parser[cli, readme]>=0.9.1",
]
tests = [
    "pytest>=7.1.3",
    "pytest-cov>=3.0.0",
    "pytest-lazy-fixture>=0.6.3",
    "pytest-timeout>=2.1.0",

]
docs = [
    "sphinx==5.3.0",
    "furo==2022.12.7",
    "sphinx-copybutton>=0.5.1",
    "sphinxext-opengraph>=0.7.3",
    "sphinx_design>=0.3.0",
    "myst-nb>=0.6.0",
]
tutorials = ["jupyter>=1.0.0", "faker==13.13.0"]

[tool.pyright]
exclude = [".*venv*"]
pythonPlatform = "Darwin"

[tool.ruff]
extend-include = ["*.ipynb"]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "A",
    "ANN",
    "ARG",
    "B",
    "C4",
    "COM",
    "D417",
    "E",
    "ERA",
    "F",
    "I",
    "ICN",
    "NPY001",
    "PD002",
    "PIE",
    "PLE",
    "PLW",
    "PT",
    "UP",
    "Q",
    "PTH",
    "RSE",
    "RET",
    "RUF",
    "SIM",
    "W",
]
ignore = [
    "ANN101",
    "ANN401",
    "E402",
    "E501",
    "F401",
    "F841",
    "RET504",
    "COM812",
]
ignore-init-module-imports = true
# Allow autofix for all enabled rules (when `--fix`) is provided.
unfixable = ["ERA"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__init__.py",
    "docs/conf.py",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py38"

[tool.ruff.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.semantic_release]
branch = "main"
version_toml = ["pyproject.toml:project.version"]
build_command = "python -m pip install build; python -m build"

[tool.setuptools]
include-package-data = true
